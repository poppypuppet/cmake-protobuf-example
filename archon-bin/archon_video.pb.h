// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: archon_video.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_archon_5fvideo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_archon_5fvideo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "archon.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_archon_5fvideo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_archon_5fvideo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_archon_5fvideo_2eproto;
namespace archon_video {
class FrameMetadata;
class FrameMetadataDefaultTypeInternal;
extern FrameMetadataDefaultTypeInternal _FrameMetadata_default_instance_;
class FrameSet;
class FrameSetDefaultTypeInternal;
extern FrameSetDefaultTypeInternal _FrameSet_default_instance_;
class FrameSet_FramesEntry_DoNotUse;
class FrameSet_FramesEntry_DoNotUseDefaultTypeInternal;
extern FrameSet_FramesEntry_DoNotUseDefaultTypeInternal _FrameSet_FramesEntry_DoNotUse_default_instance_;
class VideoFrame;
class VideoFrameDefaultTypeInternal;
extern VideoFrameDefaultTypeInternal _VideoFrame_default_instance_;
}  // namespace archon_video
PROTOBUF_NAMESPACE_OPEN
template<> ::archon_video::FrameMetadata* Arena::CreateMaybeMessage<::archon_video::FrameMetadata>(Arena*);
template<> ::archon_video::FrameSet* Arena::CreateMaybeMessage<::archon_video::FrameSet>(Arena*);
template<> ::archon_video::FrameSet_FramesEntry_DoNotUse* Arena::CreateMaybeMessage<::archon_video::FrameSet_FramesEntry_DoNotUse>(Arena*);
template<> ::archon_video::VideoFrame* Arena::CreateMaybeMessage<::archon_video::VideoFrame>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace archon_video {

enum FrameStatus : int {
  FRAME_STATUS_VALID = 0,
  FRAME_STATUS_EOF = 1,
  FrameStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FrameStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FrameStatus_IsValid(int value);
constexpr FrameStatus FrameStatus_MIN = FRAME_STATUS_VALID;
constexpr FrameStatus FrameStatus_MAX = FRAME_STATUS_EOF;
constexpr int FrameStatus_ARRAYSIZE = FrameStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FrameStatus_descriptor();
template<typename T>
inline const std::string& FrameStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FrameStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FrameStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FrameStatus_descriptor(), enum_t_value);
}
inline bool FrameStatus_Parse(
    const std::string& name, FrameStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FrameStatus>(
    FrameStatus_descriptor(), name, value);
}
enum FrameFormat : int {
  FRAME_FORMAT_RAW = 0,
  FrameFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FrameFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FrameFormat_IsValid(int value);
constexpr FrameFormat FrameFormat_MIN = FRAME_FORMAT_RAW;
constexpr FrameFormat FrameFormat_MAX = FRAME_FORMAT_RAW;
constexpr int FrameFormat_ARRAYSIZE = FrameFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FrameFormat_descriptor();
template<typename T>
inline const std::string& FrameFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FrameFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FrameFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FrameFormat_descriptor(), enum_t_value);
}
inline bool FrameFormat_Parse(
    const std::string& name, FrameFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FrameFormat>(
    FrameFormat_descriptor(), name, value);
}
enum PixelFormat : int {
  PIXEL_FORMAT_UNKNOWN = 0,
  PIXEL_FORMAT_RGB = 843204434,
  PIXEL_FORMAT_RGBA = 1094862674,
  PIXEL_FORMAT_Y8 = 538982489,
  PIXEL_FORMAT_Y16 = 540422489,
  PIXEL_FORMAT_IYUV = 1448433993,
  PIXEL_FORMAT_NV12 = 842094158,
  PIXEL_FORMAT_YUY2 = 844715353,
  PixelFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PixelFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PixelFormat_IsValid(int value);
constexpr PixelFormat PixelFormat_MIN = PIXEL_FORMAT_UNKNOWN;
constexpr PixelFormat PixelFormat_MAX = PIXEL_FORMAT_IYUV;
constexpr int PixelFormat_ARRAYSIZE = PixelFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PixelFormat_descriptor();
template<typename T>
inline const std::string& PixelFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PixelFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PixelFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PixelFormat_descriptor(), enum_t_value);
}
inline bool PixelFormat_Parse(
    const std::string& name, PixelFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PixelFormat>(
    PixelFormat_descriptor(), name, value);
}
enum SourceKind : int {
  SOURCE_KIND_UNKNOWN = 0,
  SOURCE_KIND_COLOR = 1,
  SOURCE_KIND_DEPTH = 2,
  SOURCE_KIND_INFRARED = 3,
  SourceKind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SourceKind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SourceKind_IsValid(int value);
constexpr SourceKind SourceKind_MIN = SOURCE_KIND_UNKNOWN;
constexpr SourceKind SourceKind_MAX = SOURCE_KIND_INFRARED;
constexpr int SourceKind_ARRAYSIZE = SourceKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SourceKind_descriptor();
template<typename T>
inline const std::string& SourceKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SourceKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SourceKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SourceKind_descriptor(), enum_t_value);
}
inline bool SourceKind_Parse(
    const std::string& name, SourceKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SourceKind>(
    SourceKind_descriptor(), name, value);
}
// ===================================================================

class FrameMetadata :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:archon_video.FrameMetadata) */ {
 public:
  FrameMetadata();
  virtual ~FrameMetadata();

  FrameMetadata(const FrameMetadata& from);
  FrameMetadata(FrameMetadata&& from) noexcept
    : FrameMetadata() {
    *this = ::std::move(from);
  }

  inline FrameMetadata& operator=(const FrameMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameMetadata& operator=(FrameMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrameMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrameMetadata* internal_default_instance() {
    return reinterpret_cast<const FrameMetadata*>(
               &_FrameMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FrameMetadata& a, FrameMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameMetadata* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrameMetadata* New() const final {
    return CreateMaybeMessage<FrameMetadata>(nullptr);
  }

  FrameMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrameMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrameMetadata& from);
  void MergeFrom(const FrameMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "archon_video.FrameMetadata";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_archon_5fvideo_2eproto);
    return ::descriptor_table_archon_5fvideo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeightFieldNumber = 1,
    kWidthFieldNumber = 2,
    kPixelFormatFieldNumber = 3,
    kFrameFormatFieldNumber = 4,
    kScan0OffsetFieldNumber = 5,
    kStrideFieldNumber = 6,
  };
  // int32 height = 1;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 width = 2;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .archon_video.PixelFormat pixel_format = 3;
  void clear_pixel_format();
  ::archon_video::PixelFormat pixel_format() const;
  void set_pixel_format(::archon_video::PixelFormat value);
  private:
  ::archon_video::PixelFormat _internal_pixel_format() const;
  void _internal_set_pixel_format(::archon_video::PixelFormat value);
  public:

  // .archon_video.FrameFormat frame_format = 4;
  void clear_frame_format();
  ::archon_video::FrameFormat frame_format() const;
  void set_frame_format(::archon_video::FrameFormat value);
  private:
  ::archon_video::FrameFormat _internal_frame_format() const;
  void _internal_set_frame_format(::archon_video::FrameFormat value);
  public:

  // int64 scan0_offset = 5;
  void clear_scan0_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 scan0_offset() const;
  void set_scan0_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_scan0_offset() const;
  void _internal_set_scan0_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 stride = 6;
  void clear_stride();
  ::PROTOBUF_NAMESPACE_ID::int64 stride() const;
  void set_stride(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_stride() const;
  void _internal_set_stride(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:archon_video.FrameMetadata)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  int pixel_format_;
  int frame_format_;
  ::PROTOBUF_NAMESPACE_ID::int64 scan0_offset_;
  ::PROTOBUF_NAMESPACE_ID::int64 stride_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_archon_5fvideo_2eproto;
};
// -------------------------------------------------------------------

class VideoFrame :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:archon_video.VideoFrame) */ {
 public:
  VideoFrame();
  virtual ~VideoFrame();

  VideoFrame(const VideoFrame& from);
  VideoFrame(VideoFrame&& from) noexcept
    : VideoFrame() {
    *this = ::std::move(from);
  }

  inline VideoFrame& operator=(const VideoFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoFrame& operator=(VideoFrame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VideoFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VideoFrame* internal_default_instance() {
    return reinterpret_cast<const VideoFrame*>(
               &_VideoFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VideoFrame& a, VideoFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoFrame* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VideoFrame* New() const final {
    return CreateMaybeMessage<VideoFrame>(nullptr);
  }

  VideoFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VideoFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VideoFrame& from);
  void MergeFrom(const VideoFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "archon_video.VideoFrame";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_archon_5fvideo_2eproto);
    return ::descriptor_table_archon_5fvideo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceIdFieldNumber = 3,
    kFrameTimestampFieldNumber = 5,
    kFrameMetadataFieldNumber = 8,
    kFrameBufferFieldNumber = 9,
    kFpsFieldNumber = 1,
    kFrameIdFieldNumber = 2,
    kFrameBufferSizeFieldNumber = 4,
    kFrameTimestampInMsFieldNumber = 6,
    kFrameStatusFieldNumber = 7,
    kSourceKindFieldNumber = 10,
  };
  // string source_id = 3;
  void clear_source_id();
  const std::string& source_id() const;
  void set_source_id(const std::string& value);
  void set_source_id(std::string&& value);
  void set_source_id(const char* value);
  void set_source_id(const char* value, size_t size);
  std::string* mutable_source_id();
  std::string* release_source_id();
  void set_allocated_source_id(std::string* source_id);
  private:
  const std::string& _internal_source_id() const;
  void _internal_set_source_id(const std::string& value);
  std::string* _internal_mutable_source_id();
  public:

  // string frame_timestamp = 5;
  void clear_frame_timestamp();
  const std::string& frame_timestamp() const;
  void set_frame_timestamp(const std::string& value);
  void set_frame_timestamp(std::string&& value);
  void set_frame_timestamp(const char* value);
  void set_frame_timestamp(const char* value, size_t size);
  std::string* mutable_frame_timestamp();
  std::string* release_frame_timestamp();
  void set_allocated_frame_timestamp(std::string* frame_timestamp);
  private:
  const std::string& _internal_frame_timestamp() const;
  void _internal_set_frame_timestamp(const std::string& value);
  std::string* _internal_mutable_frame_timestamp();
  public:

  // .archon_video.FrameMetadata frame_metadata = 8;
  bool has_frame_metadata() const;
  private:
  bool _internal_has_frame_metadata() const;
  public:
  void clear_frame_metadata();
  const ::archon_video::FrameMetadata& frame_metadata() const;
  ::archon_video::FrameMetadata* release_frame_metadata();
  ::archon_video::FrameMetadata* mutable_frame_metadata();
  void set_allocated_frame_metadata(::archon_video::FrameMetadata* frame_metadata);
  private:
  const ::archon_video::FrameMetadata& _internal_frame_metadata() const;
  ::archon_video::FrameMetadata* _internal_mutable_frame_metadata();
  public:

  // .archon.SharedBufferHandle frame_buffer = 9;
  bool has_frame_buffer() const;
  private:
  bool _internal_has_frame_buffer() const;
  public:
  void clear_frame_buffer();
  const ::archon::SharedBufferHandle& frame_buffer() const;
  ::archon::SharedBufferHandle* release_frame_buffer();
  ::archon::SharedBufferHandle* mutable_frame_buffer();
  void set_allocated_frame_buffer(::archon::SharedBufferHandle* frame_buffer);
  private:
  const ::archon::SharedBufferHandle& _internal_frame_buffer() const;
  ::archon::SharedBufferHandle* _internal_mutable_frame_buffer();
  public:

  // double fps = 1;
  void clear_fps();
  double fps() const;
  void set_fps(double value);
  private:
  double _internal_fps() const;
  void _internal_set_fps(double value);
  public:

  // int64 frame_id = 2;
  void clear_frame_id();
  ::PROTOBUF_NAMESPACE_ID::int64 frame_id() const;
  void set_frame_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_frame_id() const;
  void _internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 frame_buffer_size = 4;
  void clear_frame_buffer_size();
  ::PROTOBUF_NAMESPACE_ID::int64 frame_buffer_size() const;
  void set_frame_buffer_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_frame_buffer_size() const;
  void _internal_set_frame_buffer_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 frame_timestamp_in_ms = 6;
  void clear_frame_timestamp_in_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 frame_timestamp_in_ms() const;
  void set_frame_timestamp_in_ms(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_frame_timestamp_in_ms() const;
  void _internal_set_frame_timestamp_in_ms(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .archon_video.FrameStatus frame_status = 7;
  void clear_frame_status();
  ::archon_video::FrameStatus frame_status() const;
  void set_frame_status(::archon_video::FrameStatus value);
  private:
  ::archon_video::FrameStatus _internal_frame_status() const;
  void _internal_set_frame_status(::archon_video::FrameStatus value);
  public:

  // .archon_video.SourceKind source_kind = 10;
  void clear_source_kind();
  ::archon_video::SourceKind source_kind() const;
  void set_source_kind(::archon_video::SourceKind value);
  private:
  ::archon_video::SourceKind _internal_source_kind() const;
  void _internal_set_source_kind(::archon_video::SourceKind value);
  public:

  // @@protoc_insertion_point(class_scope:archon_video.VideoFrame)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_timestamp_;
  ::archon_video::FrameMetadata* frame_metadata_;
  ::archon::SharedBufferHandle* frame_buffer_;
  double fps_;
  ::PROTOBUF_NAMESPACE_ID::int64 frame_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 frame_buffer_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 frame_timestamp_in_ms_;
  int frame_status_;
  int source_kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_archon_5fvideo_2eproto;
};
// -------------------------------------------------------------------

class FrameSet_FramesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FrameSet_FramesEntry_DoNotUse, 
    std::string, ::archon_video::VideoFrame,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FrameSet_FramesEntry_DoNotUse, 
    std::string, ::archon_video::VideoFrame,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  FrameSet_FramesEntry_DoNotUse();
  FrameSet_FramesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const FrameSet_FramesEntry_DoNotUse& other);
  static const FrameSet_FramesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FrameSet_FramesEntry_DoNotUse*>(&_FrameSet_FramesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "archon_video.FrameSet.FramesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_archon_5fvideo_2eproto);
    return ::descriptor_table_archon_5fvideo_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class FrameSet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:archon_video.FrameSet) */ {
 public:
  FrameSet();
  virtual ~FrameSet();

  FrameSet(const FrameSet& from);
  FrameSet(FrameSet&& from) noexcept
    : FrameSet() {
    *this = ::std::move(from);
  }

  inline FrameSet& operator=(const FrameSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameSet& operator=(FrameSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrameSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrameSet* internal_default_instance() {
    return reinterpret_cast<const FrameSet*>(
               &_FrameSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FrameSet& a, FrameSet& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameSet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrameSet* New() const final {
    return CreateMaybeMessage<FrameSet>(nullptr);
  }

  FrameSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrameSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrameSet& from);
  void MergeFrom(const FrameSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "archon_video.FrameSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_archon_5fvideo_2eproto);
    return ::descriptor_table_archon_5fvideo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kFramesFieldNumber = 1,
  };
  // map<string, .archon_video.VideoFrame> frames = 1;
  int frames_size() const;
  private:
  int _internal_frames_size() const;
  public:
  void clear_frames();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::archon_video::VideoFrame >&
      _internal_frames() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::archon_video::VideoFrame >*
      _internal_mutable_frames();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::archon_video::VideoFrame >&
      frames() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::archon_video::VideoFrame >*
      mutable_frames();

  // @@protoc_insertion_point(class_scope:archon_video.FrameSet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      FrameSet_FramesEntry_DoNotUse,
      std::string, ::archon_video::VideoFrame,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > frames_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_archon_5fvideo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FrameMetadata

// int32 height = 1;
inline void FrameMetadata::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrameMetadata::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrameMetadata::height() const {
  // @@protoc_insertion_point(field_get:archon_video.FrameMetadata.height)
  return _internal_height();
}
inline void FrameMetadata::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void FrameMetadata::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:archon_video.FrameMetadata.height)
}

// int32 width = 2;
inline void FrameMetadata::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrameMetadata::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrameMetadata::width() const {
  // @@protoc_insertion_point(field_get:archon_video.FrameMetadata.width)
  return _internal_width();
}
inline void FrameMetadata::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void FrameMetadata::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:archon_video.FrameMetadata.width)
}

// .archon_video.PixelFormat pixel_format = 3;
inline void FrameMetadata::clear_pixel_format() {
  pixel_format_ = 0;
}
inline ::archon_video::PixelFormat FrameMetadata::_internal_pixel_format() const {
  return static_cast< ::archon_video::PixelFormat >(pixel_format_);
}
inline ::archon_video::PixelFormat FrameMetadata::pixel_format() const {
  // @@protoc_insertion_point(field_get:archon_video.FrameMetadata.pixel_format)
  return _internal_pixel_format();
}
inline void FrameMetadata::_internal_set_pixel_format(::archon_video::PixelFormat value) {
  
  pixel_format_ = value;
}
inline void FrameMetadata::set_pixel_format(::archon_video::PixelFormat value) {
  _internal_set_pixel_format(value);
  // @@protoc_insertion_point(field_set:archon_video.FrameMetadata.pixel_format)
}

// .archon_video.FrameFormat frame_format = 4;
inline void FrameMetadata::clear_frame_format() {
  frame_format_ = 0;
}
inline ::archon_video::FrameFormat FrameMetadata::_internal_frame_format() const {
  return static_cast< ::archon_video::FrameFormat >(frame_format_);
}
inline ::archon_video::FrameFormat FrameMetadata::frame_format() const {
  // @@protoc_insertion_point(field_get:archon_video.FrameMetadata.frame_format)
  return _internal_frame_format();
}
inline void FrameMetadata::_internal_set_frame_format(::archon_video::FrameFormat value) {
  
  frame_format_ = value;
}
inline void FrameMetadata::set_frame_format(::archon_video::FrameFormat value) {
  _internal_set_frame_format(value);
  // @@protoc_insertion_point(field_set:archon_video.FrameMetadata.frame_format)
}

// int64 scan0_offset = 5;
inline void FrameMetadata::clear_scan0_offset() {
  scan0_offset_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FrameMetadata::_internal_scan0_offset() const {
  return scan0_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FrameMetadata::scan0_offset() const {
  // @@protoc_insertion_point(field_get:archon_video.FrameMetadata.scan0_offset)
  return _internal_scan0_offset();
}
inline void FrameMetadata::_internal_set_scan0_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  scan0_offset_ = value;
}
inline void FrameMetadata::set_scan0_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_scan0_offset(value);
  // @@protoc_insertion_point(field_set:archon_video.FrameMetadata.scan0_offset)
}

// int64 stride = 6;
inline void FrameMetadata::clear_stride() {
  stride_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FrameMetadata::_internal_stride() const {
  return stride_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FrameMetadata::stride() const {
  // @@protoc_insertion_point(field_get:archon_video.FrameMetadata.stride)
  return _internal_stride();
}
inline void FrameMetadata::_internal_set_stride(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  stride_ = value;
}
inline void FrameMetadata::set_stride(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_stride(value);
  // @@protoc_insertion_point(field_set:archon_video.FrameMetadata.stride)
}

// -------------------------------------------------------------------

// VideoFrame

// double fps = 1;
inline void VideoFrame::clear_fps() {
  fps_ = 0;
}
inline double VideoFrame::_internal_fps() const {
  return fps_;
}
inline double VideoFrame::fps() const {
  // @@protoc_insertion_point(field_get:archon_video.VideoFrame.fps)
  return _internal_fps();
}
inline void VideoFrame::_internal_set_fps(double value) {
  
  fps_ = value;
}
inline void VideoFrame::set_fps(double value) {
  _internal_set_fps(value);
  // @@protoc_insertion_point(field_set:archon_video.VideoFrame.fps)
}

// int64 frame_id = 2;
inline void VideoFrame::clear_frame_id() {
  frame_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 VideoFrame::_internal_frame_id() const {
  return frame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 VideoFrame::frame_id() const {
  // @@protoc_insertion_point(field_get:archon_video.VideoFrame.frame_id)
  return _internal_frame_id();
}
inline void VideoFrame::_internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  frame_id_ = value;
}
inline void VideoFrame::set_frame_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:archon_video.VideoFrame.frame_id)
}

// string source_id = 3;
inline void VideoFrame::clear_source_id() {
  source_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VideoFrame::source_id() const {
  // @@protoc_insertion_point(field_get:archon_video.VideoFrame.source_id)
  return _internal_source_id();
}
inline void VideoFrame::set_source_id(const std::string& value) {
  _internal_set_source_id(value);
  // @@protoc_insertion_point(field_set:archon_video.VideoFrame.source_id)
}
inline std::string* VideoFrame::mutable_source_id() {
  // @@protoc_insertion_point(field_mutable:archon_video.VideoFrame.source_id)
  return _internal_mutable_source_id();
}
inline const std::string& VideoFrame::_internal_source_id() const {
  return source_id_.GetNoArena();
}
inline void VideoFrame::_internal_set_source_id(const std::string& value) {
  
  source_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VideoFrame::set_source_id(std::string&& value) {
  
  source_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:archon_video.VideoFrame.source_id)
}
inline void VideoFrame::set_source_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:archon_video.VideoFrame.source_id)
}
inline void VideoFrame::set_source_id(const char* value, size_t size) {
  
  source_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:archon_video.VideoFrame.source_id)
}
inline std::string* VideoFrame::_internal_mutable_source_id() {
  
  return source_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VideoFrame::release_source_id() {
  // @@protoc_insertion_point(field_release:archon_video.VideoFrame.source_id)
  
  return source_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VideoFrame::set_allocated_source_id(std::string* source_id) {
  if (source_id != nullptr) {
    
  } else {
    
  }
  source_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_id);
  // @@protoc_insertion_point(field_set_allocated:archon_video.VideoFrame.source_id)
}

// int64 frame_buffer_size = 4;
inline void VideoFrame::clear_frame_buffer_size() {
  frame_buffer_size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 VideoFrame::_internal_frame_buffer_size() const {
  return frame_buffer_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 VideoFrame::frame_buffer_size() const {
  // @@protoc_insertion_point(field_get:archon_video.VideoFrame.frame_buffer_size)
  return _internal_frame_buffer_size();
}
inline void VideoFrame::_internal_set_frame_buffer_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  frame_buffer_size_ = value;
}
inline void VideoFrame::set_frame_buffer_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_frame_buffer_size(value);
  // @@protoc_insertion_point(field_set:archon_video.VideoFrame.frame_buffer_size)
}

// string frame_timestamp = 5;
inline void VideoFrame::clear_frame_timestamp() {
  frame_timestamp_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VideoFrame::frame_timestamp() const {
  // @@protoc_insertion_point(field_get:archon_video.VideoFrame.frame_timestamp)
  return _internal_frame_timestamp();
}
inline void VideoFrame::set_frame_timestamp(const std::string& value) {
  _internal_set_frame_timestamp(value);
  // @@protoc_insertion_point(field_set:archon_video.VideoFrame.frame_timestamp)
}
inline std::string* VideoFrame::mutable_frame_timestamp() {
  // @@protoc_insertion_point(field_mutable:archon_video.VideoFrame.frame_timestamp)
  return _internal_mutable_frame_timestamp();
}
inline const std::string& VideoFrame::_internal_frame_timestamp() const {
  return frame_timestamp_.GetNoArena();
}
inline void VideoFrame::_internal_set_frame_timestamp(const std::string& value) {
  
  frame_timestamp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VideoFrame::set_frame_timestamp(std::string&& value) {
  
  frame_timestamp_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:archon_video.VideoFrame.frame_timestamp)
}
inline void VideoFrame::set_frame_timestamp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  frame_timestamp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:archon_video.VideoFrame.frame_timestamp)
}
inline void VideoFrame::set_frame_timestamp(const char* value, size_t size) {
  
  frame_timestamp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:archon_video.VideoFrame.frame_timestamp)
}
inline std::string* VideoFrame::_internal_mutable_frame_timestamp() {
  
  return frame_timestamp_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VideoFrame::release_frame_timestamp() {
  // @@protoc_insertion_point(field_release:archon_video.VideoFrame.frame_timestamp)
  
  return frame_timestamp_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VideoFrame::set_allocated_frame_timestamp(std::string* frame_timestamp) {
  if (frame_timestamp != nullptr) {
    
  } else {
    
  }
  frame_timestamp_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), frame_timestamp);
  // @@protoc_insertion_point(field_set_allocated:archon_video.VideoFrame.frame_timestamp)
}

// int64 frame_timestamp_in_ms = 6;
inline void VideoFrame::clear_frame_timestamp_in_ms() {
  frame_timestamp_in_ms_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 VideoFrame::_internal_frame_timestamp_in_ms() const {
  return frame_timestamp_in_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 VideoFrame::frame_timestamp_in_ms() const {
  // @@protoc_insertion_point(field_get:archon_video.VideoFrame.frame_timestamp_in_ms)
  return _internal_frame_timestamp_in_ms();
}
inline void VideoFrame::_internal_set_frame_timestamp_in_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  frame_timestamp_in_ms_ = value;
}
inline void VideoFrame::set_frame_timestamp_in_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_frame_timestamp_in_ms(value);
  // @@protoc_insertion_point(field_set:archon_video.VideoFrame.frame_timestamp_in_ms)
}

// .archon_video.FrameStatus frame_status = 7;
inline void VideoFrame::clear_frame_status() {
  frame_status_ = 0;
}
inline ::archon_video::FrameStatus VideoFrame::_internal_frame_status() const {
  return static_cast< ::archon_video::FrameStatus >(frame_status_);
}
inline ::archon_video::FrameStatus VideoFrame::frame_status() const {
  // @@protoc_insertion_point(field_get:archon_video.VideoFrame.frame_status)
  return _internal_frame_status();
}
inline void VideoFrame::_internal_set_frame_status(::archon_video::FrameStatus value) {
  
  frame_status_ = value;
}
inline void VideoFrame::set_frame_status(::archon_video::FrameStatus value) {
  _internal_set_frame_status(value);
  // @@protoc_insertion_point(field_set:archon_video.VideoFrame.frame_status)
}

// .archon_video.FrameMetadata frame_metadata = 8;
inline bool VideoFrame::_internal_has_frame_metadata() const {
  return this != internal_default_instance() && frame_metadata_ != nullptr;
}
inline bool VideoFrame::has_frame_metadata() const {
  return _internal_has_frame_metadata();
}
inline void VideoFrame::clear_frame_metadata() {
  if (GetArenaNoVirtual() == nullptr && frame_metadata_ != nullptr) {
    delete frame_metadata_;
  }
  frame_metadata_ = nullptr;
}
inline const ::archon_video::FrameMetadata& VideoFrame::_internal_frame_metadata() const {
  const ::archon_video::FrameMetadata* p = frame_metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::archon_video::FrameMetadata*>(
      &::archon_video::_FrameMetadata_default_instance_);
}
inline const ::archon_video::FrameMetadata& VideoFrame::frame_metadata() const {
  // @@protoc_insertion_point(field_get:archon_video.VideoFrame.frame_metadata)
  return _internal_frame_metadata();
}
inline ::archon_video::FrameMetadata* VideoFrame::release_frame_metadata() {
  // @@protoc_insertion_point(field_release:archon_video.VideoFrame.frame_metadata)
  
  ::archon_video::FrameMetadata* temp = frame_metadata_;
  frame_metadata_ = nullptr;
  return temp;
}
inline ::archon_video::FrameMetadata* VideoFrame::_internal_mutable_frame_metadata() {
  
  if (frame_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::archon_video::FrameMetadata>(GetArenaNoVirtual());
    frame_metadata_ = p;
  }
  return frame_metadata_;
}
inline ::archon_video::FrameMetadata* VideoFrame::mutable_frame_metadata() {
  // @@protoc_insertion_point(field_mutable:archon_video.VideoFrame.frame_metadata)
  return _internal_mutable_frame_metadata();
}
inline void VideoFrame::set_allocated_frame_metadata(::archon_video::FrameMetadata* frame_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete frame_metadata_;
  }
  if (frame_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      frame_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frame_metadata, submessage_arena);
    }
    
  } else {
    
  }
  frame_metadata_ = frame_metadata;
  // @@protoc_insertion_point(field_set_allocated:archon_video.VideoFrame.frame_metadata)
}

// .archon.SharedBufferHandle frame_buffer = 9;
inline bool VideoFrame::_internal_has_frame_buffer() const {
  return this != internal_default_instance() && frame_buffer_ != nullptr;
}
inline bool VideoFrame::has_frame_buffer() const {
  return _internal_has_frame_buffer();
}
inline const ::archon::SharedBufferHandle& VideoFrame::_internal_frame_buffer() const {
  const ::archon::SharedBufferHandle* p = frame_buffer_;
  return p != nullptr ? *p : *reinterpret_cast<const ::archon::SharedBufferHandle*>(
      &::archon::_SharedBufferHandle_default_instance_);
}
inline const ::archon::SharedBufferHandle& VideoFrame::frame_buffer() const {
  // @@protoc_insertion_point(field_get:archon_video.VideoFrame.frame_buffer)
  return _internal_frame_buffer();
}
inline ::archon::SharedBufferHandle* VideoFrame::release_frame_buffer() {
  // @@protoc_insertion_point(field_release:archon_video.VideoFrame.frame_buffer)
  
  ::archon::SharedBufferHandle* temp = frame_buffer_;
  frame_buffer_ = nullptr;
  return temp;
}
inline ::archon::SharedBufferHandle* VideoFrame::_internal_mutable_frame_buffer() {
  
  if (frame_buffer_ == nullptr) {
    auto* p = CreateMaybeMessage<::archon::SharedBufferHandle>(GetArenaNoVirtual());
    frame_buffer_ = p;
  }
  return frame_buffer_;
}
inline ::archon::SharedBufferHandle* VideoFrame::mutable_frame_buffer() {
  // @@protoc_insertion_point(field_mutable:archon_video.VideoFrame.frame_buffer)
  return _internal_mutable_frame_buffer();
}
inline void VideoFrame::set_allocated_frame_buffer(::archon::SharedBufferHandle* frame_buffer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(frame_buffer_);
  }
  if (frame_buffer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      frame_buffer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frame_buffer, submessage_arena);
    }
    
  } else {
    
  }
  frame_buffer_ = frame_buffer;
  // @@protoc_insertion_point(field_set_allocated:archon_video.VideoFrame.frame_buffer)
}

// .archon_video.SourceKind source_kind = 10;
inline void VideoFrame::clear_source_kind() {
  source_kind_ = 0;
}
inline ::archon_video::SourceKind VideoFrame::_internal_source_kind() const {
  return static_cast< ::archon_video::SourceKind >(source_kind_);
}
inline ::archon_video::SourceKind VideoFrame::source_kind() const {
  // @@protoc_insertion_point(field_get:archon_video.VideoFrame.source_kind)
  return _internal_source_kind();
}
inline void VideoFrame::_internal_set_source_kind(::archon_video::SourceKind value) {
  
  source_kind_ = value;
}
inline void VideoFrame::set_source_kind(::archon_video::SourceKind value) {
  _internal_set_source_kind(value);
  // @@protoc_insertion_point(field_set:archon_video.VideoFrame.source_kind)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// FrameSet

// map<string, .archon_video.VideoFrame> frames = 1;
inline int FrameSet::_internal_frames_size() const {
  return frames_.size();
}
inline int FrameSet::frames_size() const {
  return _internal_frames_size();
}
inline void FrameSet::clear_frames() {
  frames_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::archon_video::VideoFrame >&
FrameSet::_internal_frames() const {
  return frames_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::archon_video::VideoFrame >&
FrameSet::frames() const {
  // @@protoc_insertion_point(field_map:archon_video.FrameSet.frames)
  return _internal_frames();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::archon_video::VideoFrame >*
FrameSet::_internal_mutable_frames() {
  return frames_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::archon_video::VideoFrame >*
FrameSet::mutable_frames() {
  // @@protoc_insertion_point(field_mutable_map:archon_video.FrameSet.frames)
  return _internal_mutable_frames();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace archon_video

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::archon_video::FrameStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::archon_video::FrameStatus>() {
  return ::archon_video::FrameStatus_descriptor();
}
template <> struct is_proto_enum< ::archon_video::FrameFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::archon_video::FrameFormat>() {
  return ::archon_video::FrameFormat_descriptor();
}
template <> struct is_proto_enum< ::archon_video::PixelFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::archon_video::PixelFormat>() {
  return ::archon_video::PixelFormat_descriptor();
}
template <> struct is_proto_enum< ::archon_video::SourceKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::archon_video::SourceKind>() {
  return ::archon_video::SourceKind_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_archon_5fvideo_2eproto
