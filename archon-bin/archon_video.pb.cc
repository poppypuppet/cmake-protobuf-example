// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: archon_video.proto

#include "archon_video.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_archon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SharedBufferHandle_archon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_archon_5fvideo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FrameMetadata_archon_5fvideo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_archon_5fvideo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FrameSet_FramesEntry_DoNotUse_archon_5fvideo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_archon_5fvideo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VideoFrame_archon_5fvideo_2eproto;
namespace archon_video {
class FrameMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FrameMetadata> _instance;
} _FrameMetadata_default_instance_;
class VideoFrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VideoFrame> _instance;
} _VideoFrame_default_instance_;
class FrameSet_FramesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FrameSet_FramesEntry_DoNotUse> _instance;
} _FrameSet_FramesEntry_DoNotUse_default_instance_;
class FrameSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FrameSet> _instance;
} _FrameSet_default_instance_;
}  // namespace archon_video
static void InitDefaultsscc_info_FrameMetadata_archon_5fvideo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::archon_video::_FrameMetadata_default_instance_;
    new (ptr) ::archon_video::FrameMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::archon_video::FrameMetadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FrameMetadata_archon_5fvideo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FrameMetadata_archon_5fvideo_2eproto}, {}};

static void InitDefaultsscc_info_FrameSet_archon_5fvideo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::archon_video::_FrameSet_default_instance_;
    new (ptr) ::archon_video::FrameSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::archon_video::FrameSet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FrameSet_archon_5fvideo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FrameSet_archon_5fvideo_2eproto}, {
      &scc_info_FrameSet_FramesEntry_DoNotUse_archon_5fvideo_2eproto.base,}};

static void InitDefaultsscc_info_FrameSet_FramesEntry_DoNotUse_archon_5fvideo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::archon_video::_FrameSet_FramesEntry_DoNotUse_default_instance_;
    new (ptr) ::archon_video::FrameSet_FramesEntry_DoNotUse();
  }
  ::archon_video::FrameSet_FramesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FrameSet_FramesEntry_DoNotUse_archon_5fvideo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FrameSet_FramesEntry_DoNotUse_archon_5fvideo_2eproto}, {
      &scc_info_VideoFrame_archon_5fvideo_2eproto.base,}};

static void InitDefaultsscc_info_VideoFrame_archon_5fvideo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::archon_video::_VideoFrame_default_instance_;
    new (ptr) ::archon_video::VideoFrame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::archon_video::VideoFrame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VideoFrame_archon_5fvideo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_VideoFrame_archon_5fvideo_2eproto}, {
      &scc_info_FrameMetadata_archon_5fvideo_2eproto.base,
      &scc_info_SharedBufferHandle_archon_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_archon_5fvideo_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_archon_5fvideo_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_archon_5fvideo_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_archon_5fvideo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::archon_video::FrameMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::archon_video::FrameMetadata, height_),
  PROTOBUF_FIELD_OFFSET(::archon_video::FrameMetadata, width_),
  PROTOBUF_FIELD_OFFSET(::archon_video::FrameMetadata, pixel_format_),
  PROTOBUF_FIELD_OFFSET(::archon_video::FrameMetadata, frame_format_),
  PROTOBUF_FIELD_OFFSET(::archon_video::FrameMetadata, scan0_offset_),
  PROTOBUF_FIELD_OFFSET(::archon_video::FrameMetadata, stride_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::archon_video::VideoFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::archon_video::VideoFrame, fps_),
  PROTOBUF_FIELD_OFFSET(::archon_video::VideoFrame, frame_id_),
  PROTOBUF_FIELD_OFFSET(::archon_video::VideoFrame, source_id_),
  PROTOBUF_FIELD_OFFSET(::archon_video::VideoFrame, frame_buffer_size_),
  PROTOBUF_FIELD_OFFSET(::archon_video::VideoFrame, frame_timestamp_),
  PROTOBUF_FIELD_OFFSET(::archon_video::VideoFrame, frame_timestamp_in_ms_),
  PROTOBUF_FIELD_OFFSET(::archon_video::VideoFrame, frame_status_),
  PROTOBUF_FIELD_OFFSET(::archon_video::VideoFrame, frame_metadata_),
  PROTOBUF_FIELD_OFFSET(::archon_video::VideoFrame, frame_buffer_),
  PROTOBUF_FIELD_OFFSET(::archon_video::VideoFrame, source_kind_),
  PROTOBUF_FIELD_OFFSET(::archon_video::FrameSet_FramesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::archon_video::FrameSet_FramesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::archon_video::FrameSet_FramesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::archon_video::FrameSet_FramesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::archon_video::FrameSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::archon_video::FrameSet, frames_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::archon_video::FrameMetadata)},
  { 11, -1, sizeof(::archon_video::VideoFrame)},
  { 26, 33, sizeof(::archon_video::FrameSet_FramesEntry_DoNotUse)},
  { 35, -1, sizeof(::archon_video::FrameSet)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::archon_video::_FrameMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::archon_video::_VideoFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::archon_video::_FrameSet_FramesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::archon_video::_FrameSet_default_instance_),
};

const char descriptor_table_protodef_archon_5fvideo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022archon_video.proto\022\014archon_video\032\014arch"
  "on.proto\"\266\001\n\rFrameMetadata\022\016\n\006height\030\001 \001"
  "(\005\022\r\n\005width\030\002 \001(\005\022/\n\014pixel_format\030\003 \001(\0162"
  "\031.archon_video.PixelFormat\022/\n\014frame_form"
  "at\030\004 \001(\0162\031.archon_video.FrameFormat\022\024\n\014s"
  "can0_offset\030\005 \001(\003\022\016\n\006stride\030\006 \001(\003\"\330\002\n\nVi"
  "deoFrame\022\013\n\003fps\030\001 \001(\001\022\020\n\010frame_id\030\002 \001(\003\022"
  "\021\n\tsource_id\030\003 \001(\t\022\031\n\021frame_buffer_size\030"
  "\004 \001(\003\022\027\n\017frame_timestamp\030\005 \001(\t\022\035\n\025frame_"
  "timestamp_in_ms\030\006 \001(\003\022/\n\014frame_status\030\007 "
  "\001(\0162\031.archon_video.FrameStatus\0223\n\016frame_"
  "metadata\030\010 \001(\0132\033.archon_video.FrameMetad"
  "ata\0220\n\014frame_buffer\030\t \001(\0132\032.archon.Share"
  "dBufferHandle\022-\n\013source_kind\030\n \001(\0162\030.arc"
  "hon_video.SourceKind\"\207\001\n\010FrameSet\0222\n\006fra"
  "mes\030\001 \003(\0132\".archon_video.FrameSet.Frames"
  "Entry\032G\n\013FramesEntry\022\013\n\003key\030\001 \001(\t\022\'\n\005val"
  "ue\030\002 \001(\0132\030.archon_video.VideoFrame:\0028\001*;"
  "\n\013FrameStatus\022\026\n\022FRAME_STATUS_VALID\020\000\022\024\n"
  "\020FRAME_STATUS_EOF\020\001*#\n\013FrameFormat\022\024\n\020FR"
  "AME_FORMAT_RAW\020\000*\340\001\n\013PixelFormat\022\030\n\024PIXE"
  "L_FORMAT_UNKNOWN\020\000\022\030\n\020PIXEL_FORMAT_RGB\020\322"
  "\216\211\222\003\022\031\n\021PIXEL_FORMAT_RGBA\020\322\216\211\212\004\022\027\n\017PIXEL"
  "_FORMAT_Y8\020\331\360\200\201\002\022\030\n\020PIXEL_FORMAT_Y16\020\331\342\330"
  "\201\002\022\031\n\021PIXEL_FORMAT_IYUV\020\311\262\325\262\005\022\031\n\021PIXEL_F"
  "ORMAT_NV12\020\316\254\305\221\003\022\031\n\021PIXEL_FORMAT_YUY2\020\331\252"
  "\345\222\003*m\n\nSourceKind\022\027\n\023SOURCE_KIND_UNKNOWN"
  "\020\000\022\025\n\021SOURCE_KIND_COLOR\020\001\022\025\n\021SOURCE_KIND"
  "_DEPTH\020\002\022\030\n\024SOURCE_KIND_INFRARED\020\003b\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_archon_5fvideo_2eproto_deps[1] = {
  &::descriptor_table_archon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_archon_5fvideo_2eproto_sccs[4] = {
  &scc_info_FrameMetadata_archon_5fvideo_2eproto.base,
  &scc_info_FrameSet_archon_5fvideo_2eproto.base,
  &scc_info_FrameSet_FramesEntry_DoNotUse_archon_5fvideo_2eproto.base,
  &scc_info_VideoFrame_archon_5fvideo_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_archon_5fvideo_2eproto_once;
static bool descriptor_table_archon_5fvideo_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_archon_5fvideo_2eproto = {
  &descriptor_table_archon_5fvideo_2eproto_initialized, descriptor_table_protodef_archon_5fvideo_2eproto, "archon_video.proto", 1162,
  &descriptor_table_archon_5fvideo_2eproto_once, descriptor_table_archon_5fvideo_2eproto_sccs, descriptor_table_archon_5fvideo_2eproto_deps, 4, 1,
  schemas, file_default_instances, TableStruct_archon_5fvideo_2eproto::offsets,
  file_level_metadata_archon_5fvideo_2eproto, 4, file_level_enum_descriptors_archon_5fvideo_2eproto, file_level_service_descriptors_archon_5fvideo_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_archon_5fvideo_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_archon_5fvideo_2eproto), true);
namespace archon_video {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FrameStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_archon_5fvideo_2eproto);
  return file_level_enum_descriptors_archon_5fvideo_2eproto[0];
}
bool FrameStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FrameFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_archon_5fvideo_2eproto);
  return file_level_enum_descriptors_archon_5fvideo_2eproto[1];
}
bool FrameFormat_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PixelFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_archon_5fvideo_2eproto);
  return file_level_enum_descriptors_archon_5fvideo_2eproto[2];
}
bool PixelFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 538982489:
    case 540422489:
    case 842094158:
    case 843204434:
    case 844715353:
    case 1094862674:
    case 1448433993:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SourceKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_archon_5fvideo_2eproto);
  return file_level_enum_descriptors_archon_5fvideo_2eproto[3];
}
bool SourceKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void FrameMetadata::InitAsDefaultInstance() {
}
class FrameMetadata::_Internal {
 public:
};

FrameMetadata::FrameMetadata()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:archon_video.FrameMetadata)
}
FrameMetadata::FrameMetadata(const FrameMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&stride_) -
    reinterpret_cast<char*>(&height_)) + sizeof(stride_));
  // @@protoc_insertion_point(copy_constructor:archon_video.FrameMetadata)
}

void FrameMetadata::SharedCtor() {
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stride_) -
      reinterpret_cast<char*>(&height_)) + sizeof(stride_));
}

FrameMetadata::~FrameMetadata() {
  // @@protoc_insertion_point(destructor:archon_video.FrameMetadata)
  SharedDtor();
}

void FrameMetadata::SharedDtor() {
}

void FrameMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FrameMetadata& FrameMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FrameMetadata_archon_5fvideo_2eproto.base);
  return *internal_default_instance();
}


void FrameMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:archon_video.FrameMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stride_) -
      reinterpret_cast<char*>(&height_)) + sizeof(stride_));
  _internal_metadata_.Clear();
}

const char* FrameMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .archon_video.PixelFormat pixel_format = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_pixel_format(static_cast<::archon_video::PixelFormat>(val));
        } else goto handle_unusual;
        continue;
      // .archon_video.FrameFormat frame_format = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_frame_format(static_cast<::archon_video::FrameFormat>(val));
        } else goto handle_unusual;
        continue;
      // int64 scan0_offset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          scan0_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 stride = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          stride_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrameMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:archon_video.FrameMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 height = 1;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_height(), target);
  }

  // int32 width = 2;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_width(), target);
  }

  // .archon_video.PixelFormat pixel_format = 3;
  if (this->pixel_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_pixel_format(), target);
  }

  // .archon_video.FrameFormat frame_format = 4;
  if (this->frame_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_frame_format(), target);
  }

  // int64 scan0_offset = 5;
  if (this->scan0_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_scan0_offset(), target);
  }

  // int64 stride = 6;
  if (this->stride() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_stride(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:archon_video.FrameMetadata)
  return target;
}

size_t FrameMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:archon_video.FrameMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 height = 1;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  // int32 width = 2;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  // .archon_video.PixelFormat pixel_format = 3;
  if (this->pixel_format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pixel_format());
  }

  // .archon_video.FrameFormat frame_format = 4;
  if (this->frame_format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_frame_format());
  }

  // int64 scan0_offset = 5;
  if (this->scan0_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_scan0_offset());
  }

  // int64 stride = 6;
  if (this->stride() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_stride());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:archon_video.FrameMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FrameMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:archon_video.FrameMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:archon_video.FrameMetadata)
    MergeFrom(*source);
  }
}

void FrameMetadata::MergeFrom(const FrameMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:archon_video.FrameMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.pixel_format() != 0) {
    _internal_set_pixel_format(from._internal_pixel_format());
  }
  if (from.frame_format() != 0) {
    _internal_set_frame_format(from._internal_frame_format());
  }
  if (from.scan0_offset() != 0) {
    _internal_set_scan0_offset(from._internal_scan0_offset());
  }
  if (from.stride() != 0) {
    _internal_set_stride(from._internal_stride());
  }
}

void FrameMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:archon_video.FrameMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameMetadata::CopyFrom(const FrameMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:archon_video.FrameMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameMetadata::IsInitialized() const {
  return true;
}

void FrameMetadata::InternalSwap(FrameMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(height_, other->height_);
  swap(width_, other->width_);
  swap(pixel_format_, other->pixel_format_);
  swap(frame_format_, other->frame_format_);
  swap(scan0_offset_, other->scan0_offset_);
  swap(stride_, other->stride_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameMetadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VideoFrame::InitAsDefaultInstance() {
  ::archon_video::_VideoFrame_default_instance_._instance.get_mutable()->frame_metadata_ = const_cast< ::archon_video::FrameMetadata*>(
      ::archon_video::FrameMetadata::internal_default_instance());
  ::archon_video::_VideoFrame_default_instance_._instance.get_mutable()->frame_buffer_ = const_cast< ::archon::SharedBufferHandle*>(
      ::archon::SharedBufferHandle::internal_default_instance());
}
class VideoFrame::_Internal {
 public:
  static const ::archon_video::FrameMetadata& frame_metadata(const VideoFrame* msg);
  static const ::archon::SharedBufferHandle& frame_buffer(const VideoFrame* msg);
};

const ::archon_video::FrameMetadata&
VideoFrame::_Internal::frame_metadata(const VideoFrame* msg) {
  return *msg->frame_metadata_;
}
const ::archon::SharedBufferHandle&
VideoFrame::_Internal::frame_buffer(const VideoFrame* msg) {
  return *msg->frame_buffer_;
}
void VideoFrame::clear_frame_buffer() {
  if (GetArenaNoVirtual() == nullptr && frame_buffer_ != nullptr) {
    delete frame_buffer_;
  }
  frame_buffer_ = nullptr;
}
VideoFrame::VideoFrame()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:archon_video.VideoFrame)
}
VideoFrame::VideoFrame(const VideoFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source_id().empty()) {
    source_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_id_);
  }
  frame_timestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_frame_timestamp().empty()) {
    frame_timestamp_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.frame_timestamp_);
  }
  if (from._internal_has_frame_metadata()) {
    frame_metadata_ = new ::archon_video::FrameMetadata(*from.frame_metadata_);
  } else {
    frame_metadata_ = nullptr;
  }
  if (from._internal_has_frame_buffer()) {
    frame_buffer_ = new ::archon::SharedBufferHandle(*from.frame_buffer_);
  } else {
    frame_buffer_ = nullptr;
  }
  ::memcpy(&fps_, &from.fps_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_kind_) -
    reinterpret_cast<char*>(&fps_)) + sizeof(source_kind_));
  // @@protoc_insertion_point(copy_constructor:archon_video.VideoFrame)
}

void VideoFrame::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VideoFrame_archon_5fvideo_2eproto.base);
  source_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  frame_timestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&frame_metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_kind_) -
      reinterpret_cast<char*>(&frame_metadata_)) + sizeof(source_kind_));
}

VideoFrame::~VideoFrame() {
  // @@protoc_insertion_point(destructor:archon_video.VideoFrame)
  SharedDtor();
}

void VideoFrame::SharedDtor() {
  source_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  frame_timestamp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete frame_metadata_;
  if (this != internal_default_instance()) delete frame_buffer_;
}

void VideoFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VideoFrame& VideoFrame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VideoFrame_archon_5fvideo_2eproto.base);
  return *internal_default_instance();
}


void VideoFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:archon_video.VideoFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  frame_timestamp_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && frame_metadata_ != nullptr) {
    delete frame_metadata_;
  }
  frame_metadata_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && frame_buffer_ != nullptr) {
    delete frame_buffer_;
  }
  frame_buffer_ = nullptr;
  ::memset(&fps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_kind_) -
      reinterpret_cast<char*>(&fps_)) + sizeof(source_kind_));
  _internal_metadata_.Clear();
}

const char* VideoFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double fps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          fps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int64 frame_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string source_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_source_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "archon_video.VideoFrame.source_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 frame_buffer_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          frame_buffer_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string frame_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_frame_timestamp();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "archon_video.VideoFrame.frame_timestamp"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 frame_timestamp_in_ms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          frame_timestamp_in_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .archon_video.FrameStatus frame_status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_frame_status(static_cast<::archon_video::FrameStatus>(val));
        } else goto handle_unusual;
        continue;
      // .archon_video.FrameMetadata frame_metadata = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_frame_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .archon.SharedBufferHandle frame_buffer = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_frame_buffer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .archon_video.SourceKind source_kind = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_source_kind(static_cast<::archon_video::SourceKind>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VideoFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:archon_video.VideoFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double fps = 1;
  if (!(this->fps() <= 0 && this->fps() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_fps(), target);
  }

  // int64 frame_id = 2;
  if (this->frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_frame_id(), target);
  }

  // string source_id = 3;
  if (this->source_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_id().data(), static_cast<int>(this->_internal_source_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "archon_video.VideoFrame.source_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_source_id(), target);
  }

  // int64 frame_buffer_size = 4;
  if (this->frame_buffer_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_frame_buffer_size(), target);
  }

  // string frame_timestamp = 5;
  if (this->frame_timestamp().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_frame_timestamp().data(), static_cast<int>(this->_internal_frame_timestamp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "archon_video.VideoFrame.frame_timestamp");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_frame_timestamp(), target);
  }

  // int64 frame_timestamp_in_ms = 6;
  if (this->frame_timestamp_in_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_frame_timestamp_in_ms(), target);
  }

  // .archon_video.FrameStatus frame_status = 7;
  if (this->frame_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_frame_status(), target);
  }

  // .archon_video.FrameMetadata frame_metadata = 8;
  if (this->has_frame_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::frame_metadata(this), target, stream);
  }

  // .archon.SharedBufferHandle frame_buffer = 9;
  if (this->has_frame_buffer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::frame_buffer(this), target, stream);
  }

  // .archon_video.SourceKind source_kind = 10;
  if (this->source_kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_source_kind(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:archon_video.VideoFrame)
  return target;
}

size_t VideoFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:archon_video.VideoFrame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string source_id = 3;
  if (this->source_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_id());
  }

  // string frame_timestamp = 5;
  if (this->frame_timestamp().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_frame_timestamp());
  }

  // .archon_video.FrameMetadata frame_metadata = 8;
  if (this->has_frame_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *frame_metadata_);
  }

  // .archon.SharedBufferHandle frame_buffer = 9;
  if (this->has_frame_buffer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *frame_buffer_);
  }

  // double fps = 1;
  if (!(this->fps() <= 0 && this->fps() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 frame_id = 2;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_frame_id());
  }

  // int64 frame_buffer_size = 4;
  if (this->frame_buffer_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_frame_buffer_size());
  }

  // int64 frame_timestamp_in_ms = 6;
  if (this->frame_timestamp_in_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_frame_timestamp_in_ms());
  }

  // .archon_video.FrameStatus frame_status = 7;
  if (this->frame_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_frame_status());
  }

  // .archon_video.SourceKind source_kind = 10;
  if (this->source_kind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_source_kind());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoFrame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:archon_video.VideoFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoFrame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VideoFrame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:archon_video.VideoFrame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:archon_video.VideoFrame)
    MergeFrom(*source);
  }
}

void VideoFrame::MergeFrom(const VideoFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:archon_video.VideoFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.source_id().size() > 0) {

    source_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_id_);
  }
  if (from.frame_timestamp().size() > 0) {

    frame_timestamp_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.frame_timestamp_);
  }
  if (from.has_frame_metadata()) {
    _internal_mutable_frame_metadata()->::archon_video::FrameMetadata::MergeFrom(from._internal_frame_metadata());
  }
  if (from.has_frame_buffer()) {
    _internal_mutable_frame_buffer()->::archon::SharedBufferHandle::MergeFrom(from._internal_frame_buffer());
  }
  if (!(from.fps() <= 0 && from.fps() >= 0)) {
    _internal_set_fps(from._internal_fps());
  }
  if (from.frame_id() != 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
  if (from.frame_buffer_size() != 0) {
    _internal_set_frame_buffer_size(from._internal_frame_buffer_size());
  }
  if (from.frame_timestamp_in_ms() != 0) {
    _internal_set_frame_timestamp_in_ms(from._internal_frame_timestamp_in_ms());
  }
  if (from.frame_status() != 0) {
    _internal_set_frame_status(from._internal_frame_status());
  }
  if (from.source_kind() != 0) {
    _internal_set_source_kind(from._internal_source_kind());
  }
}

void VideoFrame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:archon_video.VideoFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoFrame::CopyFrom(const VideoFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:archon_video.VideoFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoFrame::IsInitialized() const {
  return true;
}

void VideoFrame::InternalSwap(VideoFrame* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  source_id_.Swap(&other->source_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  frame_timestamp_.Swap(&other->frame_timestamp_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(frame_metadata_, other->frame_metadata_);
  swap(frame_buffer_, other->frame_buffer_);
  swap(fps_, other->fps_);
  swap(frame_id_, other->frame_id_);
  swap(frame_buffer_size_, other->frame_buffer_size_);
  swap(frame_timestamp_in_ms_, other->frame_timestamp_in_ms_);
  swap(frame_status_, other->frame_status_);
  swap(source_kind_, other->source_kind_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoFrame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

FrameSet_FramesEntry_DoNotUse::FrameSet_FramesEntry_DoNotUse() {}
FrameSet_FramesEntry_DoNotUse::FrameSet_FramesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void FrameSet_FramesEntry_DoNotUse::MergeFrom(const FrameSet_FramesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata FrameSet_FramesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void FrameSet_FramesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void FrameSet::InitAsDefaultInstance() {
}
class FrameSet::_Internal {
 public:
};

FrameSet::FrameSet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:archon_video.FrameSet)
}
FrameSet::FrameSet(const FrameSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  frames_.MergeFrom(from.frames_);
  // @@protoc_insertion_point(copy_constructor:archon_video.FrameSet)
}

void FrameSet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FrameSet_archon_5fvideo_2eproto.base);
}

FrameSet::~FrameSet() {
  // @@protoc_insertion_point(destructor:archon_video.FrameSet)
  SharedDtor();
}

void FrameSet::SharedDtor() {
}

void FrameSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FrameSet& FrameSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FrameSet_archon_5fvideo_2eproto.base);
  return *internal_default_instance();
}


void FrameSet::Clear() {
// @@protoc_insertion_point(message_clear_start:archon_video.FrameSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frames_.Clear();
  _internal_metadata_.Clear();
}

const char* FrameSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .archon_video.VideoFrame> frames = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&frames_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrameSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:archon_video.FrameSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .archon_video.VideoFrame> frames = 1;
  if (!this->_internal_frames().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::archon_video::VideoFrame >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "archon_video.FrameSet.FramesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_frames().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_frames().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::archon_video::VideoFrame >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::archon_video::VideoFrame >::const_iterator
          it = this->_internal_frames().begin();
          it != this->_internal_frames().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = FrameSet_FramesEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::archon_video::VideoFrame >::const_iterator
          it = this->_internal_frames().begin();
          it != this->_internal_frames().end(); ++it) {
        target = FrameSet_FramesEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:archon_video.FrameSet)
  return target;
}

size_t FrameSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:archon_video.FrameSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .archon_video.VideoFrame> frames = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_frames_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::archon_video::VideoFrame >::const_iterator
      it = this->_internal_frames().begin();
      it != this->_internal_frames().end(); ++it) {
    total_size += FrameSet_FramesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:archon_video.FrameSet)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FrameSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:archon_video.FrameSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:archon_video.FrameSet)
    MergeFrom(*source);
  }
}

void FrameSet::MergeFrom(const FrameSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:archon_video.FrameSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  frames_.MergeFrom(from.frames_);
}

void FrameSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:archon_video.FrameSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameSet::CopyFrom(const FrameSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:archon_video.FrameSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameSet::IsInitialized() const {
  return true;
}

void FrameSet::InternalSwap(FrameSet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  frames_.Swap(&other->frames_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameSet::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace archon_video
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::archon_video::FrameMetadata* Arena::CreateMaybeMessage< ::archon_video::FrameMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::archon_video::FrameMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::archon_video::VideoFrame* Arena::CreateMaybeMessage< ::archon_video::VideoFrame >(Arena* arena) {
  return Arena::CreateInternal< ::archon_video::VideoFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::archon_video::FrameSet_FramesEntry_DoNotUse* Arena::CreateMaybeMessage< ::archon_video::FrameSet_FramesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::archon_video::FrameSet_FramesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::archon_video::FrameSet* Arena::CreateMaybeMessage< ::archon_video::FrameSet >(Arena* arena) {
  return Arena::CreateInternal< ::archon_video::FrameSet >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
